" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
"===================================================================================
"  DESCRIPTION: A craftsman's toolbox
"
" .__         .__       .__  /\                .__                      
" |  |   ____ |__| ____ |  |_)/  ______  ___  _|__| ____________   ____ 
" |  | _/ __ \|  |/ ___\|  |  \ /  ___/  \  \/ /  |/     \_  __ \_/ ___\
" |  |_\  ___/|  / /_/  >   Y  \\___ \    \   /|  |  Y Y  \  | \/\  \___
" |____/\___  >__\___  /|___|  /____  >    \_/ |__|__|_|  /__|    \___  >
"           \/  /_____/      \/     \/                  \/            \/
"
"===================================================================================
"

" Vim Plugins {
set nocompatible              " be iMproved, required
filetype off            " required

call plug#begin('~/.vim/plugged')

"
"-----------------------------------------------------------------------------------
" Github repos for bundles that we want to have installed (removed
" https://github.com/).
"-----------------------------------------------------------------------------------

 Plug 'ervandew/supertab'
 Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Language Support
"   Python
 Plug 'zchee/deoplete-jedi'
 Plug 'hdima/python-syntax'

 " CSS
 Plug 'ap/vim-css-color'

 " JavaScript
 Plug 'pangloss/vim-javascript'
 Plug 'mustache/vim-mustache-handlebars'
 Plug 'tpope/vim-rails'
 Plug 'othree/html5.vim'
 Plug 'sheerun/vim-polyglot'
 Plug 'sbdchd/neoformat'
 Plug 'pearofducks/ansible-vim'


 " FZFFFFFFF
 Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
 Plug 'junegunn/fzf.vim'


 Plug 'mbbill/undotree'

 Plug 'vim-scripts/YankRing.vim'

 "Snippit Stuff
 Plug 'SirVer/ultisnips'
 Plug 'honza/vim-snippets'

 " Navigation
 Plug 'justinmk/vim-sneak'
 Plug 'Lokaltog/vim-easymotion'
 Plug 'kshenoy/vim-signature'

 " Color Schemes
 Plug 'JarrodCTaylor/vim-256-color-schemes'
 Plug 'junegunn/seoul256.vim'
 Plug 'chriskempson/base16-vim'
 Plug 'morhetz/gruvbox'
 Plug 'chriskempson/base16-vim'
 Plug 'ajh17/Spacegray.vim'

 " Git
 Plug 'airblade/vim-gitgutter'
 Plug 'tpope/vim-fugitive'
 Plug 'junegunn/gv.vim'

 " IDE Style Stuff
 Plug 'mhinz/vim-startify'
 Plug 'scrooloose/nerdtree'
 Plug 'abaldwin88/roamer.vim'

 Plug 'vim-airline/vim-airline'
 Plug 'vim-airline/vim-airline-themes'

 Plug 'majutsushi/tagbar'

" Text Manipulation / Display
 Plug 'Raimondi/delimitMate'
 Plug 'tpope/vim-surround'
 Plug 'terryma/vim-expand-region'
 Plug 'vim-scripts/matchit.zip'
 Plug 'tpope/vim-tbone'
 Plug 'junegunn/rainbow_parentheses.vim'

 " Shows register content
 Plug 'junegunn/vim-peekaboo'

 "Commenting
 Plug 'tpope/vim-commentary'

 " Syntax Checking
 " Plug 'w0rp/ale'

 " Python Code Folding
 Plug 'tmhedberg/SimpylFold'

 " Misc Functions
 Plug 'vim-scripts/L9'

 Plug 'christoomey/vim-tmux-navigator'
 Plug 'francoiscabrol/ranger.vim'

 Plug 'junegunn/goyo.vim'
 Plug 'vimwiki/vimwiki'

" Add plugins to &runtimepath
" All of your Plugins must be added before the following line
call plug#end() " required


 filetype plugin indent on    " required
 " To ignore plugin indent changes, instead use:
 "filetype plugin on
 "
 " Brief help
 "
     " PlugInstall [name ...] [#threads]   | Install plugins
     " PlugUpdate [name ...] [#threads]    | Install or update plugins
     " PlugClean[!]                        | Remove unused directories (bang version will clean without prompt)
     " PlugUpgrade                         | Upgrade vim-plug itself
     " PlugStatus                          | Check the status of plugins
     " PlugDiff                            | Examine changes from the previous update and the pending changes
     " PlugSnapshot[!] [output path]       | Generate script for restoring the current snapshot of the plugins
     "
 " Put your non-Plugin stuff after this line

" }

" General Settings {
"
"-----------------------------------------------------------------------------------
" Enable file type detection. Use the default filetype settings.
" Load indent files, to automatically do language-dependent indenting.
"-----------------------------------------------------------------------------------
filetype  plugin on
filetype  indent on
"
"-----------------------------------------------------------------------------------
" Color scheme and fonts if gui (gvim) then mustang if command line zenburn
"-----------------------------------------------------------------------------------
set t_Co=256
set background=dark
" colorscheme harlem-nights
colorscheme gruvbox
" colorscheme Tomorrow-Night-Eighties
"
"-----------------------------------------------------------------------------------
" Switch syntax highlighting on.
"-----------------------------------------------------------------------------------
syntax on
"
"-----------------------------------------------------------------------------------
" Various settings
"-----------------------------------------------------------------------------------
set number
set autoindent                         " Copy indent from current line
set autoread                           " Read open files again when changed outside Vim
set autowrite                          " Write a modified buffer on each :next , ...
set backspace=indent,eol,start         " Backspacing over everything in insert mode
set history=50                         " Keep 50 lines of command line history
set hlsearch                           " Highlight the last used search pattern
set incsearch                          " Do incremental searching
"set list                              " Toggle manually with set list / set nolist or set list!
set listchars=""                       " Empty the listchars
set listchars=tab:>.                   " A tab will be displayed as >...
set listchars+=trail:.                 " Trailing white spaces will be displayed as .
set nobackup                           " Don't constantly write backup files
set noswapfile                         " Ain't nobody got time for swap files
set noerrorbells                       " Don't beep
set nowrap                             " Do not wrap lines
set popt=left:8pc,right:3pc            " Print options
set shiftwidth=4                       " Number of spaces to use for each step of indent
set showcmd                            " Display incomplete commands in the bottom line of the screen
set smartcase                          " Ignore case if search pattern is all lowercase, case_sensitive otherwise
set tabstop=4                          " Number of spaces that a <Tab> counts for
set expandtab                          " Make vim use spaces and not tabs
set undolevels=1000                    " Never can be too careful when it comes to undoing
set hidden                             " Don't unload the buffer when we switch between them. Saves undo history
set visualbell                         " Visual bell instead of beeping
set wildignore=*.swp,*.bak,*.pyc,*.class,node_modules/**,../src/**  " wildmenu: ignore these extensions
set wildmenu                           " Command-line completion in an enhanced mode
set shell=bash                         " Required to let zsh know how to run things on command line
set ttimeoutlen=50                     " Fix delay when escaping from insert with Esc
set colorcolumn=80

"-----------------------------------------------------------------------------------
" Turn off the toolbar that is under the menu in gvim
"-----------------------------------------------------------------------------------
set guioptions-=T

"-----------------------------------------------------------------------------------
" Tags
"-----------------------------------------------------------------------------------
set tags=./tags;/
"-----------------------------------------------------------------------------------
" Set the minimum number of lines above and below the cursor
"-----------------------------------------------------------------------------------
set scrolloff=3

"-----------------------------------------------------------------------------------
" Treat JSON files like JavaScript
"-----------------------------------------------------------------------------------
au BufNewFile,BufRead *.json set ft=javascript

"-----------------------------------------------------------------------------------
" Use Goyo for editing these file types
"-----------------------------------------------------------------------------------

function! s:auto_goyo()
    let extension = expand('%:e')
    if extension == 'wiki'
        Goyo 90
    else
        let bufnr = bufnr('%')
        Goyo!
        execute 'b '.bufnr
    endif
endfunction

augroup goyo_markdown
    autocmd!
    autocmd BufEnter * call s:auto_goyo()
augroup END


"-----------------------------------------------------------------------------------
" Make pasting done without any indentation break
"-----------------------------------------------------------------------------------
set pastetoggle=<F3>

"-----------------------------------------------------------------------------------
" Initially display all folds open
"-----------------------------------------------------------------------------------
set nofoldenable

"-----------------------------------------------------------------------------------
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
"-----------------------------------------------------------------------------------
if has("autocmd")
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif
endif

"-----------------------------------------------------------------------------------
" set vim to save tmp files elsewhere
"-----------------------------------------------------------------------------------
set backupdir=~/.vim/backups/
set directory=~/.vim/temps/

"-----------------------------------------------------------------------------------
" --- target on cursor
"-----------------------------------------------------------------------------------
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline cursorcolumn
set cursorline cursorcolumn

" }

" Status line {
set laststatus=2                                    " Make the second to last line of vim our status line
let g:airline_theme='luna'                   " Use the custom theme I wrote
let g:airline_left_sep=''                           " No separator as they seem to look funky
let g:airline_right_sep=''                          " No separator as they seem to look funky
let g:airline#extensions#branch#enabled = 0         " Do not show the git branch in the status line
let g:airline#extensions#tabline#show_buffers = 0   " Do not list buffers in the status line
" let g:airline_section_x = ''                        " Do not list the filetype or virtualenv in the status line
" let g:airline_section_y = '[R%04l,C%04v] [LEN=%L]'  " Replace file encoding and file format info with file position
" let g:airline_section_z = ''                        " Do not show the default file position info
let g:airline#extensions#virtualenv#enabled = 0
let g:airline#extensions#ale#error_symbol = '⨉ '
let g:airline#extensions#ale#warning_symbol = '⚠ '
" }

" Plugin Configurations {

" ALE
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

let g:ale_linters = {'python': ['flake8'], 'javascript': ['eslint']}

"-----------------------------------------------------------------------------------
" UltiSnips configurations
"-----------------------------------------------------------------------------------
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"-----------------------------------------------------------------------------------
" Ctrlp configurations
"-----------------------------------------------------------------------------------
let g:ctrlp_custom_ignore = 'static\|src\|tmp$\|vendor$\|node_modules$\|bower_components$\|xmlrunner$\|.DS_Store|.git|.bak|.swp|.pyc'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_max_height = 18
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
" --- This will only search git tracked files
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

"-----------------------------------------------------------------------------------
" Exuberant ctags configurations
" Vim will look for a ctags file in the current directory and continue
" up the file path until it finds one
"-----------------------------------------------------------------------------------
" Enable ctags support
set tags=./.ctags,.ctags;

"-----------------------------------------------------------------------------------
" Jedi configurations
"-----------------------------------------------------------------------------------
let g:jedi#goto_definitions_command = "<Leader>j"
let g:jedi#use_tabs_not_buffers = 0     " Use buffers not tabs
let g:jedi#popup_on_dot = 0

"-----------------------------------------------------------------------------------
" NERDTree configurations
"-----------------------------------------------------------------------------------
" Make NERDTree ignore .pyc files
let NERDTreeIgnore = ['\.pyc$']

"-----------------------------------------------------------------------------------
" Powerline
"-----------------------------------------------------------------------------------
let g:Powerline_symbols = 'fancy'

"-----------------------------------------------------------------------------------
" Startify configurations
"-----------------------------------------------------------------------------------
let g:ctrlp_reuse_window = 'startify'
let g:startify_change_to_dir = 0
" Highlight the acsii banner with red font
hi StartifyHeader ctermfg=124
" Set the contents of the banner
let g:startify_custom_header = [
            \ '               AAAAAAAA       PPPPPPPPPPPPP      PPPPPPPPPPPPP        SSSSSSSSSS     ',
            \ '              AAAAAAAAA       PPPPPPPPPPPPPPPP   PPPPPPPPPPPPPPPP   SSSSSSSSSSSSSS   ',
            \ '             AAAAAAAAAA       PPPPPPPPPPPPPPPPP PPPPPPPPPPPPPPPPPP SSSSSS   SSSSSSS  ',
            \ '                                          PPPPP              PPPPP                   ',
            \ '                                          PPPPP              PPPPP                   ',
            \ '                                         PPPPPP             PPPPPP                   ',
            \ '          AAAAAAAAAAAAAA    PPPPPPPPPPPPPPPPPP PPPPPPPPPPPPPPPPPP    SSSSSSSSSSSSS   ',
            \ '         AAAAAAAAAAAAAAA    PPPPPPPPPPPPPPPPP  PPPPPPPPPPPPPPPPP        SSSSSSSSSSS  ',
            \ '        AAAAAA     AAAAAA   PPPPPP             PPPPPP            SSSSS      SSSSSSS  ',
            \ '       AAAAAA      AAAAAA  PPPPPPP            PPPPPPP            SSSSSS     SSSSSSS  ',
            \ '      AAAAAA       AAAAAA  PPPPPPP            PPPPPPP             SSSSSSSSSSSSSSSS   ',
            \ '     AAAAAA        AAAAAAA PPPPPPP            PPPPPPP               SSSSSSSSSSSS     ',
            \ '    AAAAAAA        AAAAAAAAPPPPPPP            PPPPPPP                  SSSSSS        ',
            \ '                                                                                     ',
            \ '    ===============================================================================  ',
            \ '    ===============================================================================  ',
            \ '',
            \]
" List recently used files using viminfo.
let g:startify_show_files = 1
" The number of files to list.
let g:startify_show_files_number = 10
" A list of files to bookmark. Always shown
let g:startify_bookmarks = [ '~/.vimrc' ]

let g:ctrlp_reuse_window = 'startify'

autocmd VimEnter *
            \   if !argc()
            \ |   Startify
            \ |   NERDTree
            \ |   wincmd w
            \ | endif

"-----------------------------------------------------------------------------------
" python syntax
"-----------------------------------------------------------------------------------
let g:python_highlight_space_errors = 0
let g:python_highlight_indent_errors = 0
let g:python_highlight_all = 1

"-----------------------------------------------------------------------------------
" vimsneak
"-----------------------------------------------------------------------------------
let g:sneak#use_ic_scs = 1
let g:sneak#streak = 1

"-----------------------------------------------------------------------------------
" --- Obvious search highlight
"-----------------------------------------------------------------------------------
highlight Search ctermbg=black ctermfg=yellow term=underline

"-----------------------------------------------------------------------------------
" gruvbox
"-----------------------------------------------------------------------------------
let g:gruvbox_contrast_dark = 'hard'
let g:gruvbox_invert_selection = 1
let g:gruvbox_invert_signs = 0

"-----------------------------------------------------------------------------------
" javascript-libararies-syntax
"-----------------------------------------------------------------------------------
let g:used_javascript_libs = 'handlebars,jquery'

"-----------------------------------------------------------------------------------
" SuperTab
"-----------------------------------------------------------------------------------
autocmd FileType * setlocal omnifunc=syntaxcomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete

let g:SuperTabCrMapping = 0
let g:SuperTabDefaultCompletionType = '<c-n>'
let g:SuperTabContextDefaultCompletionType = '<c-x><c-u>'
autocmd FileType *
    \ if &omnifunc != '' |
    \     call SuperTabChain(&omnifunc, '<c-p>') |
    \ endif


"-----------------------------------------------------------------------------------
" Rainbow Parentheses
"-----------------------------------------------------------------------------------
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

"-----------------------------------------------------------------------------------
" Custom Neovim stuff
"-----------------------------------------------------------------------------------
if has('nvim')
    "Ctrl+h is somehow broken in neovim.
    nmap <BS> <C-W>h

    " Use deoplete.
    let g:deoplete#enable_at_startup = 1

    let g:tern#command = ['tern']
    let g:tern#arguments = ['--persistent']

    let g:python_host_prog = '/Users/abarax/.pyenv/versions/neovim2/bin/python'
    let g:python3_host_prog = '/Users/abarax/.pyenv/versions/neovim3/bin/python'
endif

"-----------------------------------------------------------------------------------
" FZF
"-----------------------------------------------------------------------------------
if executable("rg")
    " --column: Show column number
    " --line-number: Show line number
    " --no-heading: Do not show file headings in results
    " --fixed-strings: Search term as a literal string
    " --ignore-case: Case insensitive search
    " --no-ignore: Do not respect .gitignore, etc...
    " --hidden: Search hidden files and folders
    " --follow: Follow symlinks
    " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder and cordova/ folder (cordova doesn't typically have use cases for searching within))
    " --color: Search color options
    command! -bang -nargs=* Find call 
                \ fzf#vim#grep(
                \ 'rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --glob "!cordova/*" --color "always" '.shellescape(<q-args>), 1,
                \   <bang>0 ? fzf#vim#with_preview('up:60%')
                \           : fzf#vim#with_preview('right:50%:hidden', '?'),
                \   <bang>0)

    command! -bang -nargs=* FindAll call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)

    set grepprg=rg\ --vimgrep

    let $FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
elseif executable("ag")
    let $FZF_DEFAULT_COMMAND = 'ag -g ""'
endif

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

" autocmd! User FzfStatusLine call <SID>fzf_statusline()


" }

" Misc Functions {

function! RenewTagsFile()
    exe 'silent !rm -rf .ctags'
    exe 'silent !coffeetags --include-vars -Rf .ctags'
    exe 'silent !ctags -a -Rf .ctags --languages=python --python-kinds=-iv --exclude=build --exclude=dist ' . system('python -c "from distutils.sysconfig import get_python_lib; print get_python_lib()"')''
    exe 'silent !ctags -a -Rf .ctags --extra=+f --exclude=.git --languages=python --python-kinds=-iv --exclude=build --exclude=dist 2>/dev/null'
    exe 'redraw!'
endfunction

function! SortLines() range
    execute a:firstline . "," . a:lastline . 's/^\(.*\)$/\=strdisplaywidth( submatch(0) ) . " " . submatch(0)/'
    execute a:firstline . "," . a:lastline . 'sort n'
    execute a:firstline . "," . a:lastline . 's/^\d\+\s//'
endfunction

function! CopyFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        redraw!
    endif
endfunction

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" }

" Leigh's Remapped Keys {
"===================================================================================
"  (nore) prefix -- non-recursive
"  (un)   prefix -- Remove a mode-specific map
"  Commands                        Mode
"  --------                        ----
"  map                             Normal, Visual, Select, Operator Pending modes
"  nmap, nnoremap, nunmap          Normal mode
"  imap, inoremap, iunmap          Insert and Replace mode
"  vmap, vnoremap, vunmap          Visual and Select mode
"  xmap, xnoremap, xunmap          Visual mode
"  smap, snoremap, sunmap          Select mode
"  cmap, cnoremap, cunmap          Command-line mode
"  omap, onoremap, ounmap          Operator pending mode
"===================================================================================
"
" --- remap leader to comma
let mapleader=","

noremap ; :

" --- remap local leader to backslash
let maplocalleader = "\<Space>"

" --- toggle Tagbar
nnoremap <Leader>tb :TagbarToggle<CR>
" --- open CtrlP buffer explorer
nnoremap <Leader>b :Buffers<CR>
" --- Split the window vertically
nnoremap <Leader>\ :vsplit<CR>
" --- Split the window horizontally
nnoremap <Leader>- :split<CR>
" --- Toggle Syntastic
nnoremap <Leader>ts :SyntasticToggleMode<CR>
" --- Clear the search buffer and highlighted text with enter press
:nnoremap <CR> :nohlsearch<CR>
" --- Search the ctags index file for anything by class or method name
map <Leader>st :CtrlPTag<CR>
" --- Refresh the ctags file
nnoremap <Leader>rt :call RenewTagsFile()<CR>
" --- Strip trailing whitespace
nnoremap <Leader>W :%s/\s\+$//<CR>:let @/=''<CR>
" --- Better window navigation E.g. now use Ctrl+j instead of Ctrl+W+j
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" --- Toggle relative line numbering
nnoremap<Leader>tn :set relativenumber!<CR>
" --- Shortcut to RenameFile function defined below
map <Leader>rf :call RenameFile()<CR>
" --- Shortcut to CopyFile function defined below
map <Leader>cf :call CopyFile()<CR>
" --- open fzf as a fuzzy finder
nnoremap <Leader>ff :Files<CR>
" --- open fzf as a fuzzy finder and input search term
nnoremap <Leader>sf :Find 
" --- open fzf as a fuzzy finder for lines
nnoremap <Leader>sl :Lines<CR> 
" --- shortcut to save the current document
map .. :w<CR>
" -- spell check
noremap <Leader>sp :set spell spelllang=en_us<CR>
" --- toggle Tagbar
nnoremap <Leader>tb :TagbarToggle<CR>
" --- basic file system navigation view
map <Leader>d :Ranger<CR>
nmap <Leader>nt :NERDTreeFind<CR>
" --- go to the last file you had open
nmap <Leader><Leader> <c-^>
" --- ,ev Shortcut to edit .vimrc file on the fly on a vertical window
nnoremap <Leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>
" --- ,sv Shortcut to edit .vimrc file on the fly on a vertical window
nnoremap <Leader>sv :source $MYVIMRC<CR>:echo ".vimrc config reloaded"<CR>
" --- ,ez Shortcut to edit .zshrc file on the fly on a vertical window
nnoremap <Leader>ez <C-w><C-v><C-l>:e ~/.zshrc<CR>
" --- ,ed Shortcut to edit hammerspoon init.lua file on the fly on a vertical window
nnoremap <Leader>eh <C-w><C-v><C-l>:e ~/.hammerspoon/init.lua<CR>
" --- Easy motion
let g:EasyMotion_leader_key = '<Leader>l'
" --- jj and jk For Qicker Escaping between normal and editing mode
inoremap jj <ESC>
inoremap jk <ESC>
" Copy current buffer path relative to root of VIM session to system clipboard
nnoremap <Leader>yp :let @" = expand("%:p")"<CR>:echo "Copied file path to clipboard"<CR>
" Copy current filename to system clipboard
nnoremap <Leader>yf :let @"=expand("%:t")<CR>:echo "Copied file name to clipboard"<CR>
" Copy current buffer path without filename to system clipboard
nnoremap <Leader>yd :let @"=expand("%:h")<CR>:echo "Copied file directory to clipboard"<CR>
" --- Toggle relative line numbering
nnoremap<Leader>tn :set relativenumber!<CR>
" --- Shortcut to surround inner words
nmap<Leader>s ysiw
" --- EasyMotion jump to character forwards
map <Tab> <Leader>lf
" --- Easymotion jump to character backwards
map <S-Tab> <Leader>lF

" Toggle PasteMode
nmap <Leader>p :setlocal paste! paste?<cr>

map <Leader>db Oimport pdb;pdb.set_trace()<ESC>

" Search Replace Shortcut
noremap <Leader>sr :%s:::g<Left><Left><Left>

" JSON Reformat
noremap <Leader>js :%!python -m json.tool<CR>

" GitDiff
noremap <Leader>gs :Gstatus<CR>

" GitDiff
noremap <Leader>gd :Gdiff<CR>

" Tig open
noremap <Leader>t :!tig<CR>

"-----------------------------------------------------------------------------------
" Copy to clipboard
"-----------------------------------------------------------------------------------
vnoremap  <Leader>y  "+y
nnoremap  <Leader>Y  "+yg_
nnoremap  <Leader>y  "+y
nnoremap  <Leader>yy  "+yy

"-----------------------------------------------------------------------------------
" Marks
"-----------------------------------------------------------------------------------
nmap <Leader>m `]
nmap <Leader>M `[
nmap mm m,
nnoremap  <Leader>mm  :Marks<CR>
nnoremap  <Leader>dm  :delm!<CR>:delm A-Z0-9<CR>:call signature#sign#Refresh()<CR>


"-----------------------------------------------------------------------------------
" YankRing
"-----------------------------------------------------------------------------------

let g:yankring_history_file = '.yankring-history'
nnoremap ,yr :YRShow<CR>
nnoremap C-y :YRShow<CR>


"-----------------------------------------------------------------------------------
" Folds
"-----------------------------------------------------------------------------------
" Open Single Fold
nnoremap  <Leader>fo zo 
" Close Single Fold
nnoremap  <Leader>fc zc 
" Open All Folds
nnoremap  <Leader>fO zR 
" Close All Folds
nnoremap  <Leader>fC zM 

" Isort python import sorting. This is a pip package
autocmd FileType python nnoremap <LocalLeader>i :!isort %<CR><CR>

"Custom Commands
" Spawn small terminal window
command! -nargs=0 Cmd exe 'Tmux split-window -l 12 -c '.shellescape(getcwd())

" }

nnoremap <Leader>c :Cmd<CR>

function! YAPF() range
  " Determine range to format.
  let l:line_ranges = a:firstline . '-' . a:lastline
  let l:cmd = 'yapf --lines=' . l:line_ranges

  " Call YAPF with the current buffer
  let l:formatted_text = system(l:cmd, join(getline(1, '$'), "\n") . "\n")

  " Update the buffer.
  execute '1,' . string(line('$')) . 'delete'
  call setline(1, split(l:formatted_text, "\n"))

  " Reset cursor to first line of the formatted range.
  call cursor(a:firstline, 1)
endfunction

command! -range=% YAPF <line1>,<line2>call YAPF()

"-----------------------------------------------------------------------------------
" Ranger
"-----------------------------------------------------------------------------------

let g:ranger_map_keys = 0

map <leader>r :Ranger<CR>

"-----------------------------------------------------------------------------------
" VimWiki
"-----------------------------------------------------------------------------------

let g:vimwiki_listsyms = '✗○◐●✓'
let g:vimwiki_folding = 'list'

au FileType vimwiki setl sw=2 sts=2 et


if executable('ag')
  let &grepprg = 'ag --nogroup --nocolor --column'
else
let &grepprg = 'grep -rn $* *'
endif
command! -nargs=1 -bar Grep execute 'silent! grep! <q-args>' | redraw! | copen
