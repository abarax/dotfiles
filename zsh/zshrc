#!/bin/zsh
# vim: set foldmarker={{,}} foldlevel=1 foldmethod=marker:
#===================================================================================
#                 .__
#  ________  _____|  |_________   ____
#  \___   / /  ___/  |  \_  __ \_/ ___\
#   /    /  \___ \|   Y  \  | \/\  \___
#  /_____ \/____  >___|  /__|    \___  >
#        \/     \/     \/            \/
#===================================================================================
#

# General Settings {{
#
DOTFILES=$HOME/dotfiles
#-------------------------------------------------------------------------------
# Autoload colors and tab completion
#-------------------------------------------------------------------------------
autoload -U colors && colors
autoload -U compinit
compinit -C

#-------------------------------------------------------------------------------
# Modify default zsh directory coloring on ls commands
#-------------------------------------------------------------------------------
export LSCOLORS=gxfxcxdxbxegedabagacad

#-------------------------------------------------------------------------------
# case-insensitive (all),partial-word and then substring completion
#-------------------------------------------------------------------------------
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

#-------------------------------------------------------------------------------
# Local array variable
#-------------------------------------------------------------------------------
local -a precmd_functions

#-------------------------------------------------------------------------------
# Set the desired setup options man zshoptions
#-------------------------------------------------------------------------------
setopt  auto_cd
setopt  auto_pushd
setopt  noclobber
setopt  complete_aliases
setopt  extended_glob
setopt  hist_ignore_all_dups
setopt  hist_ignore_space
setopt  share_history
setopt  noflowcontrol
setopt  list_types
setopt  mark_dirs
setopt  path_dirs
setopt  prompt_percent
setopt  prompt_subst

export EDITOR="vi"

#-------------------------------------------------------------------------------
# History settings
#-------------------------------------------------------------------------------
HISTFILE=$HOME/.zsh_history
HISTFILESIZE=65536
HISTSIZE=4096
SAVEHIST=4096
REPORTTIME=60

#-------------------------------------------------------------------------------
# utf-8 in the terminal, will break stuff if your term isn't utf aware
#-------------------------------------------------------------------------------
export LANG=en_US.UTF-8
export LC_ALL=$LANG
export LC_COLLATE=C

#-------------------------------------------------------------------------------
# Set grepoptions
#-------------------------------------------------------------------------------
export GREP_OPTIONS='--color=auto'

#-------------------------------------------------------------------------------
# Alows Mac to use the correct ctags, old version installed by default
#-------------------------------------------------------------------------------
PATH="/usr/local/bin:$PATH"

#-------------------------------------------------------------------------------
# Editor and display configurations
#-------------------------------------------------------------------------------
export GIT_EDITOR='vim'
export LESS='-imJMWR'
export PAGER="less $LESS"
export MANPAGER=$PAGER
export GIT_PAGER=$PAGER
export BROWSER='chromium-browser'

#-------------------------------------------------------------------------------
# Silence Wine debugging output
#-------------------------------------------------------------------------------
export WINEDEBUG=-all

#-------------------------------------------------------------------------------
# Specify virtualenv directories
#-------------------------------------------------------------------------------
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/VirtualDevEnvs

#-------------------------------------------------------------------------------
#
#-------------------------------------------------------------------------------
zstyle ':completion:*' list-colors "$LS_COLORS"
zstyle -e ':completion:*:(ssh|scp|sshfs|ping|telnet|nc|rsync):*' hosts '
    reply=( ${=${${(M)${(f)"$(<~/.ssh/config)"}:#Host*}#Host }:#*\**} )'

# Open Chrome from commandline
alias chrome="open /Applications/Google\ Chrome.app/ --args --disable-web-security"

#Android stuff
PATH=${PATH}:~/dev/tools/adt-bundle-mac-x86_64-20140702/sdk/platform-tools:~/dev/tools/adt-bundle-mac-x86_64-20140702/sdk/tools

PATH=$PATH:/usr/local/sbin

# }}

# Key Bindings {{
#-------------------------------------------------------------------------------
# Set emacs like key bindings
#-------------------------------------------------------------------------------
bindkey '\Cb' backward-word
bindkey '\Cf' forward-word
bindkey '^R' history-incremental-search-backward
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^?' backward-delete-char
bindkey '^H' backward-delete-char
# }}

#  Aliases {{
#-------------------------------------------------------------------------------
alias vim='nvim'
alias vi='vim'
alias ls='ls -aFHG'
alias ll='ls -alh'
alias la='ls -la'
alias l='ls -lah'
alias lls='ll -Sr'
alias less='less -imJMW'
alias update='brew update && brew upgrade'
alias upgrade='brew upgrade'
alias clean='brew doctor'
alias root_trash='sudo bash -c "exec rm -r /root/.local/share/Trash/{files,info}/*"'
alias tmux="TERM=screen-256color-bce tmux"  # Fix tmux making vim colors funky
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ping='ping -c 5'
alias ad='add_current_directory_to_path'
alias startdb='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias stopdb='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias gs='git status'
alias gd='git diff'
alias ts='tig status'
alias tmuxh='tmux attach -t host-session || tmux new-session -s host-session'
alias tmuxp='tmux attach -t pair-session || tmux new-session -t host-session -s pair-session'
alias rogue='tmux switch-client -t "pair-session"; tmux display-message "Entering Rogue Mode"'
alias buddy='tmux switch-client -t "host-session"; tmux display-message "Entering Buddy Mode"'
alias mux='tmuxinator'

# }}

# Functions {{
#===============================================================================

#-------------------------------------------------------------------------------
#  Python webserver: cd into a directory you want to share and then
#                    type webshare. You will be able to connect to that directory
#                    with other machines on the local net work with IP:8000
#                    the function will display the current machines ip address
#-------------------------------------------------------------------------------
function webshare() {
    local_ip=`hostname -I | cut -d " " -f 1`
    echo "connect to $local_ip:8000"
        python -m SimpleHTTPServer > /dev/null 2>&1
    }

#-------------------------------------------------------------------------------
# A timer function that will say the message and display a pop-up
# after the specified amount of time.
#-------------------------------------------------------------------------------
function workTimer() {
    echo -n "How long to set timer for? (ex. 1h, 10m, 20s, etc) => "; read duration
    echo -n "What to words_to_say when done => "; read words_to_say
    sleep $duration && say "$words_to_say"
}

#-------------------------------------------------------------------------------
# Shows the specified number of the top memory consuming processes and their PID
#-------------------------------------------------------------------------------
function mem_usage() {
    echo -n "How many you what to see? "; read number
    echo ""
    echo "Mem Size       PID     Process"
    echo "============================================================================="
    ps aux | awk '{ output = sprintf("%5d Mb --> %5s --> %s%s%s%s", $6/1024, $2, $11, $12, $13, $14); print output }' | sort -gr | head -n $number
}

#------------------------------------------------------------------------------
# Because, well I need to spell check a lot :\
#------------------------------------------------------------------------------
spell (){
    echo $1 | aspell -a
}

# -------------------------------------------------------------------
# Display a neatly formatted path good for debugging
# -------------------------------------------------------------------
path() {
echo $PATH | tr ":" "\n" | \
    awk "{ sub(\"/usr\",   \"$fg_no_bold[green]/usr$reset_color\"); \
           sub(\"/bin\",   \"$fg_no_bold[blue]/bin$reset_color\"); \
           sub(\"/opt\",   \"$fg_no_bold[cyan]/opt$reset_color\"); \
           sub(\"/sbin\",  \"$fg_no_bold[magenta]/sbin$reset_color\"); \
           sub(\"/local\", \"$fg_no_bold[yellow]/local$reset_color\"); \
           print }"
  }

#--------------------------------------------------------------------
# Displays mounted drive information in a nicely formatted manner
# -------------------------------------------------------------------
function nicemount() {
    (echo "DEVICE PATH TYPE FLAGS" && mount | awk '$2="";1') | column -t ;
}

#--------------------------------------------------------------------
# Add the current working directory to the path
# -------------------------------------------------------------------
add_current_directory_to_path() {
    path+=(`pwd`)
}

# }}

# Add pyenv scripts {{
# ------------------------------------------------------------------------------
if hash pyenv 2>/dev/null; then
    # Pyenv Stuff
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
else
    echo "WARNING: You do not have pyenv installed, please install using 'brew install pyenv'"
fi
    
# }}

# oh-my-zsh config {{
#===================================================================================

#===================================================================================
# Path to your oh-my-zsh installation.
#===================================================================================
plugins = (fastgit vi-mode)
export ZSH=/Users/abarax/.oh-my-zsh

ZSH_CUSTOM=~/.zsh-custom-themes

#===================================================================================
# Set name of the theme to load.
#===================================================================================
ZSH_THEME="bullet-train"

#===================================================================================
# Set up oh-my-zsh
#===================================================================================
source $ZSH/oh-my-zsh.sh

#===================================================================================
# bullet-train theme config
#===================================================================================
BULLETTRAIN_VIRTUALENV_FG=black
BULLETTRAIN_RUBY_SHOW=false

#===================================================================================
#TMUX
#===================================================================================
DISABLE_AUTO_TITLE=true

#===================================================================================
# Syntax highlighting in commandline
#===================================================================================
source $DOTFILES/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# }}

# FZF Setup {{
#===================================================================================

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'
export FZF_DEFAULT_OPTS='-x --height 40% --reverse --border'

# export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND | with-dir"
if [ -x ~/.vim/plugged/fzf.vim/bin/preview.rb ]; then
  export FZF_CTRL_T_OPTS="--preview '~/.vim/plugged/fzf.vim/bin/preview.rb {} | head -200'"
fi

export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview' --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort' --header 'Press CTRL-Y to copy command into clipboard' --border"

# BLSD command does bredth first list of directories, command installed
# from here: https://github.com/junegunn/blsd
command -v blsd > /dev/null && export FZF_ALT_C_COMMAND='blsd'
# Preview using the 'tree' command which displays a tree like structure 
# for directory, insalled by 'brew install tree'
command -v tree > /dev/null && export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# display a smaller fzf window instead of fullscreen
fzf-down() {
  fzf --height 50% "$@" --border
}

# }}

# Useful FZF Functions {{
#===================================================================================

#-------------------------------------------------------------------------------
# c - browse chrome history
#-------------------------------------------------------------------------------
c() {
  local cols sep
  export cols=$(( COLUMNS / 3 ))
  export sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select title, url from urls order by last_visit_time desc" |
  ruby -ne '
    cols = ENV["cols"].to_i
    title, url = $_.split(ENV["sep"])
    len = 0
    puts "\x1b[36m" + title.each_char.take_while { |e|
      if len < cols
        len += e =~ /\p{Han}|\p{Katakana}|\p{Hiragana}|\p{Hangul}/ ? 2 : 1
      end
    }.join + " " * (2 + cols - len) + "\x1b[m" + url' |
  fzf --ansi --multi --no-hscroll --tiebreak=index |
  sed 's#.*\(https*://\)#\1#' | xargs open
}

#-------------------------------------------------------------------------------
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
#-------------------------------------------------------------------------------
fe() {
  local file
  file=$(fzf-tmux --query="$1" --select-1 --exit-0)
  [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

#-------------------------------------------------------------------------------
# v - open files in ~/.viminfo
#-------------------------------------------------------------------------------
v() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
          while read line; do
            [ -f "${line/\~/$HOME}" ] && echo "$line"
          done | fzf -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}

#-------------------------------------------------------------------------------
# fco - checkout git branch/tag
#-------------------------------------------------------------------------------
fco() {
  local tags branches target
  tags=$(git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") | sed '/^$/d' |
    fzf-down --no-hscroll --reverse --ansi +m -d "\t" -n 2 -q "$*") || return
  git checkout $(echo "$target" | awk '{print $2}')
}

#-------------------------------------------------------------------------------
# fshow - git commit browser
#-------------------------------------------------------------------------------
fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --header "Press CTRL-S to toggle sort" \
      --preview "echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
                 xargs -I % sh -c 'git show --color=always % | head -200 '" \
      --bind "enter:execute:echo {} | grep -o '[a-f0-9]\{7\}' | head -1 |
              xargs -I % sh -c 'vim fugitive://\$(git rev-parse --show-toplevel)/.git//% < /dev/tty'"
}

#-------------------------------------------------------------------------------
# fh - repeat history
#-------------------------------------------------------------------------------
fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

#-------------------------------------------------------------------------------
# Copy File contents to clipboard
#-------------------------------------------------------------------------------
pbc() {
  perl -pe 'chomp if eof' | pbcopy
}

#-------------------------------------------------------------------------------
# Z integration - fzf cd to recent directories
#-------------------------------------------------------------------------------
source $DOTFILES/z.sh
unalias z 2> /dev/null
z() {
  [ $# -gt 0 ] && _z "$*" && return
  cd "$(_z -l 2>&1 | fzf --height 40% --reverse +s --tac --query "$*" | sed 's/^[0-9,.]* *//')"
}

# }}

# GIT heart FZF {{
#===================================================================================

is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

#-------------------------------------------------------------------------------
#  git status
#-------------------------------------------------------------------------------
gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

#-------------------------------------------------------------------------------
#  git branches
#-------------------------------------------------------------------------------
gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

#-------------------------------------------------------------------------------
#  git tags
#-------------------------------------------------------------------------------
gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -200'
}

#-------------------------------------------------------------------------------
#  git log / history viewer
#-------------------------------------------------------------------------------
gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -200' |
  grep -o "[a-f0-9]\{7,\}"
}

#-------------------------------------------------------------------------------
#  git remotes
#-------------------------------------------------------------------------------
gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

# }}

# PATH stuff {{
export PATH=$DOTFILES/bin:$PATH

source $DOTFILES/zsh/alias.zsh
source $DOTFILES/zsh/functions.zsh

# }}

# RVM Setup {{
#=============================================================================

#-------------------------------------------------------------------------------
# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
#-------------------------------------------------------------------------------
export PATH="$PATH:$HOME/.rvm/bin"

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
# }}

# EOF
